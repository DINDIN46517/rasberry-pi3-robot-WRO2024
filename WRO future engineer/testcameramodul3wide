from picamera2 import Picamera2, Preview
import numpy as np
import cv2
import RPi.GPIO as GPIO
from time import sleep

# GPIO setup
in1 = 24
in2 = 23
en = 25

GPIO.setmode(GPIO.BCM)
GPIO.setup(in1, GPIO.OUT)
GPIO.setup(in2, GPIO.OUT)
GPIO.setup(en, GPIO.OUT)
GPIO.setup(17, GPIO.OUT)
GPIO.setup(27, GPIO.OUT)
GPIO.setup(22, GPIO.OUT)

GPIO.output(in1, GPIO.LOW)
GPIO.output(in2, GPIO.LOW)
p = GPIO.PWM(en, 400)
p.start(40)

Turn = GPIO.PWM(22, 1200)
Turn.start(100)

# Camera setup
camera = Picamera2()
config = camera.create_still_configuration(main={"size": (320, 240)})
camera.configure(config)
camera.start_preview(Preview.QTGL)
camera.start()

HSV_value_color = [
    ((40, 150, 150), (50, 200, 200), 'G'),
    ((0, 0, 210), (50, 30, 255), 'R')
]

while True:
    image = camera.capture_array()
    image = cv2.rotate(image, cv2.ROTATE_180)
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    for (lower, upper, color_name) in HSV_value_color:
        mask = cv2.inRange(hsv, np.array(lower), np.array(upper))
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        print(contours)

        if len(contours) == 0:
            GPIO.output(17, GPIO.LOW)
            GPIO.output(27, GPIO.LOW)
            GPIO.output(in1, GPIO.LOW)
            GPIO.output(in2, GPIO.HIGH)

        for contour in contours:
            area = cv2.contourArea(contour)
            if area > 70:
                if color_name == "G":
                    GPIO.output(17, GPIO.HIGH)
                    GPIO.output(27, GPIO.LOW)
                    GPIO.output(in1, GPIO.LOW)
                    GPIO.output(in2, GPIO.HIGH)
                    sleep(0.5)
                    GPIO.output(17, GPIO.LOW)
                    GPIO.output(27, GPIO.HIGH)
                    GPIO.output(in1, GPIO.LOW)
                    GPIO.output(in2, GPIO.HIGH)
                    sleep(1)
                    GPIO.output(17, GPIO.HIGH)
                    GPIO.output(27, GPIO.LOW)
                    GPIO.output(in1, GPIO.LOW)
                    GPIO.output(in2, GPIO.HIGH)
                    sleep(0.5)
                # elif color_name == "R":
                GPIO.output(17, GPIO.LOW)
                GPIO.output(27, GPIO.HIGH)
                GPIO.output(in1, GPIO.LOW)
                GPIO.output(in2, GPIO.HIGH)
                sleep(0.6)
                GPIO.output(17, GPIO.HIGH)
                GPIO.output(27, GPIO.LOW)
                GPIO.output(in1, GPIO.LOW)
                GPIO.output(in2, GPIO.HIGH)
                sleep(1)
                GPIO.output(17, GPIO.LOW)
                GPIO.output(27, GPIO.HIGH)
                GPIO.output(in1, GPIO.LOW)
                GPIO.output(in2, GPIO.HIGH)
                sleep(0.4)

            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(image, (x, y), (x + w, y + h), (167, 49, 195), 2)
            cv2.putText(image, color_name, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 0), 1)

    cv2.imshow("image", image)

    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break

cv2.destroyAllWindows()
camera.stop()
GPIO.cleanup()
