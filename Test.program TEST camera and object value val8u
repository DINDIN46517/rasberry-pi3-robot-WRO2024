import numpy as np
import cv2
import RPi.GPIO as GPIO
from time import sleep
from picamera2 import Picamera2

# GPIO pin setup
in1 = 24
in2 = 23
en = 25

GPIO.setmode(GPIO.BCM)
GPIO.setup(in1, GPIO.OUT)
GPIO.setup(in2, GPIO.OUT)
GPIO.setup(en, GPIO.OUT)
GPIO.setup(17, GPIO.OUT)
GPIO.setup(27, GPIO.OUT)
GPIO.setup(22, GPIO.OUT)

GPIO.output(in1, GPIO.LOW)
GPIO.output(in2, GPIO.LOW)
p = GPIO.PWM(en, 400)
p.start(40)

Turn = GPIO.PWM(22, 1200)
Turn.start(100)

# Camera setup
picam2 = Picamera2()
config = picam2.create_preview_configuration(main={"size": (620, 320)})
picam2.configure(config)
picam2.set_controls({"AfMode": 2})
picam2.start(show_preview=True)
picam2.awb_mode = 'on'
picam2.framerate = 32

HSV_value_color = [
    ((40, 150, 150), (50, 255, 255), 'G'),  # Adjusted HSV range for green
    ((0, 100, 100), (10, 255, 255), 'R1'),  # Lower range for red
    ((160, 100, 100), (180, 255, 255), 'R2')  # Upper range for red
]

while True:
    frame = picam2.capture_array()
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    
    red_detected = False
    for (lower, upper, color_name) in HSV_value_color:
        mask = cv2.inRange(hsv, np.array(lower), np.array(upper))
        cv2.imshow(f"{color_name} Mask", mask)
        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        if color_name in ['R1', 'R2'] and len(contours) > 0:
            red_detected = True
        
        if len(contours) > 0:
            for contour in contours:
                area = cv2.contourArea(contour)
                x, y, w, h = cv2.boundingRect(contour)
                cv2.rectangle(frame, (x, y), (x + w, y + h), (167, 49, 195), 2)
                cv2.putText(frame, color_name, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 0), 1)
    

    
    cv2.imshow("images", frame)
    
    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break

# Clean up
cv2.destroyAllWindows()
GPIO.cleanup()
